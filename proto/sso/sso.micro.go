// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sso/sso.proto

/*
Package go_micro_srv_sso is a generated protocol buffer package.

It is generated from these files:
	proto/sso/sso.proto

It has these top-level messages:
	Message
	AuthRequest
	AuthResponse
	RegisterRequest
	RegisterResponse
	CaptchaRequest
	CaptchaResponse
	StreamingRequest
	StreamingResponse
	Ping
	Pong
*/
package go_micro_srv_sso

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sso service

type SsoService interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Captcha(ctx context.Context, in *CaptchaRequest, opts ...client.CallOption) (*CaptchaResponse, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Sso_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Sso_PingPongService, error)
}

type ssoService struct {
	c    client.Client
	name string
}

func NewSsoService(name string, c client.Client) SsoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.sso"
	}
	return &ssoService{
		c:    c,
		name: name,
	}
}

func (c *ssoService) Auth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Sso.Auth", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Sso.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoService) Captcha(ctx context.Context, in *CaptchaRequest, opts ...client.CallOption) (*CaptchaResponse, error) {
	req := c.c.NewRequest(c.name, "Sso.Captcha", in)
	out := new(CaptchaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Sso_StreamService, error) {
	req := c.c.NewRequest(c.name, "Sso.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &ssoServiceStream{stream}, nil
}

type Sso_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type ssoServiceStream struct {
	stream client.Stream
}

func (x *ssoServiceStream) Close() error {
	return x.stream.Close()
}

func (x *ssoServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ssoServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ssoServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ssoService) PingPong(ctx context.Context, opts ...client.CallOption) (Sso_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Sso.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &ssoServicePingPong{stream}, nil
}

type Sso_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type ssoServicePingPong struct {
	stream client.Stream
}

func (x *ssoServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *ssoServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ssoServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ssoServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *ssoServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sso service

type SsoHandler interface {
	Auth(context.Context, *AuthRequest, *AuthResponse) error
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Captcha(context.Context, *CaptchaRequest, *CaptchaResponse) error
	Stream(context.Context, *StreamingRequest, Sso_StreamStream) error
	PingPong(context.Context, Sso_PingPongStream) error
}

func RegisterSsoHandler(s server.Server, hdlr SsoHandler, opts ...server.HandlerOption) error {
	type sso interface {
		Auth(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Captcha(ctx context.Context, in *CaptchaRequest, out *CaptchaResponse) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Sso struct {
		sso
	}
	h := &ssoHandler{hdlr}
	return s.Handle(s.NewHandler(&Sso{h}, opts...))
}

type ssoHandler struct {
	SsoHandler
}

func (h *ssoHandler) Auth(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.SsoHandler.Auth(ctx, in, out)
}

func (h *ssoHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.SsoHandler.Register(ctx, in, out)
}

func (h *ssoHandler) Captcha(ctx context.Context, in *CaptchaRequest, out *CaptchaResponse) error {
	return h.SsoHandler.Captcha(ctx, in, out)
}

func (h *ssoHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SsoHandler.Stream(ctx, m, &ssoStreamStream{stream})
}

type Sso_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type ssoStreamStream struct {
	stream server.Stream
}

func (x *ssoStreamStream) Close() error {
	return x.stream.Close()
}

func (x *ssoStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ssoStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ssoStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *ssoHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.SsoHandler.PingPong(ctx, &ssoPingPongStream{stream})
}

type Sso_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type ssoPingPongStream struct {
	stream server.Stream
}

func (x *ssoPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *ssoPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *ssoPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *ssoPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *ssoPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
